{{! Using main layout }}
{{#section 'head'}}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<style>
/* Loading overlay */
.loading-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(13, 17, 23, 0.8);
  display: none;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.loading-content {
  background: var(--bg-darker);
  color: var(--text-primary);
  padding: 20px;
  border-radius: 8px;
  text-align: center;
  border: 1px solid var(--border-color);
  max-width: 400px;
  width: 90%;
}

.spinner {
  border: 4px solid var(--border-color);
  border-top: 4px solid var(--primary-color);
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
  margin: 0 auto 10px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Alert styles */
.alert {
  padding: 12px 16px;
  margin: 10px 0;
  border-radius: 4px;
  display: none;
}

.alert-success {
  background-color: rgba(46, 160, 67, 0.1);
  color: var(--success-color);
  border: 1px solid var(--success-color);
}

.alert-error {
  background-color: rgba(248, 81, 73, 0.1);
  color: var(--error-color);
  border: 1px solid var(--error-color);
}

.alert-info {
  background-color: rgba(31, 111, 235, 0.1);
  color: var(--secondary-color);
  border: 1px solid var(--secondary-color);
}

/* Enhanced form validation */
.form-group.error input {
  border-color: var(--error-color);
  box-shadow: 0 0 0 0.2rem rgba(248, 81, 73, 0.25);
}

.form-group.error .error-message {
  color: var(--error-color);
  font-size: 0.875rem;
  margin-top: 5px;
  display: block;
}

.error-message {
  display: none;
}

/* Enhanced section items */
.section-item {
  transition: all 0.3s ease;
  background: var(--bg-darker);
  border: 1px solid var(--border-color);
  border-radius: 8px;
  padding: 15px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.section-item:hover {
  background: var(--bg-light);
  border-color: var(--primary-color);
  transform: translateY(-1px);
}

.section-status {
  display: inline-block;
  padding: 2px 8px;
  border-radius: 12px;
  font-size: 0.75rem;
  font-weight: bold;
  margin-left: 10px;
}

.section-status.valid {
  background-color: rgba(46, 160, 67, 0.1);
  color: var(--success-color);
  border: 1px solid var(--success-color);
}

.section-status.invalid {
  background-color: rgba(248, 81, 73, 0.1);
  color: var(--error-color);
  border: 1px solid var(--error-color);
}

.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

/* Empty state */
.empty-state {
  text-align: center;
  padding: 40px;
  color: var(--text-secondary);
}

.empty-state i {
  font-size: 48px;
  margin-bottom: 16px;
  display: block;
}

/* Bulk actions */
.bulk-actions {
  background: var(--bg-darker);
  border: 1px solid var(--border-color);
  padding: 15px;
  border-radius: 8px;
  margin-bottom: 20px;
  display: none;
}

.bulk-actions.show {
  display: block;
}

.section-info {
  display: flex;
  align-items: flex-start;
  gap: 10px;
  flex: 1;
}

.section-checkbox {
  margin-top: 5px;
}

.form-actions {
  display: flex;
  gap: 10px;
  justify-content: flex-end;
  margin-top: 20px;
}

.btn-primary {
  background: var(--primary-color);
  color: var(--text-primary);
  border: 1px solid var(--primary-color);
}

.btn-primary:hover {
  background: var(--primary-accent);
}

.btn-secondary {
  background: var(--bg-light);
  color: var(--text-primary);
  border: 1px solid var(--border-color);
}

.btn-secondary:hover {
  background: var(--bg-lighter);
}

.required {
  color: var(--error-color);
}

.sections-list {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.section-details h3 {
  margin: 0 0 5px 0;
  color: var(--text-primary);
}

.section-details p {
  margin: 0;
  color: var(--text-secondary);
}

.section-actions {
  display: flex;
  gap: 10px;
}

.btn {
  padding: 8px 12px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  text-decoration: none;
  display: inline-flex;
  align-items: center;
  gap: 5px;
  transition: all 0.3s ease;
}

.btn-edit {
  background: var(--secondary-color);
  color: var(--text-primary);
  border: 1px solid var(--secondary-color);
}

.btn-edit:hover {
  background: rgba(31, 111, 235, 0.8);
}

.btn-delete {
  background: var(--error-color);
  color: var(--text-primary);
  border: 1px solid var(--error-color);
}

.btn-delete:hover {
  background: rgba(248, 81, 73, 0.8);
}

.btn-download {
  background: var(--success-color);
  color: var(--text-primary);
  border: 1px solid var(--success-color);
}

.btn-download:hover {
  background: rgba(46, 160, 67, 0.8);
}

.modal {
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(13, 17, 23, 0.8);
}

.modal-content {
  background: var(--bg-darker);
  color: var(--text-primary);
  margin: 15% auto;
  padding: 20px;
  border: 1px solid var(--border-color);
  width: 80%;
  max-width: 500px;
  border-radius: 8px;
}

.close {
  color: var(--text-secondary);
  float: right;
  font-size: 28px;
  font-weight: bold;
  cursor: pointer;
}

.close:hover {
  color: var(--text-primary);
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  color: var(--text-primary);
}

.form-group input {
  width: 100%;
  padding: 8px;
  border: 1px solid var(--border-color);
  border-radius: 4px;
  background: var(--bg-dark);
  color: var(--text-primary);
}

.form-group input:focus {
  border-color: var(--primary-color);
  outline: none;
}
</style>
{{/section}}

<div class="dashboard-container">
  <!-- Alert container -->
  <div id="alertContainer"></div>

  <div class="dashboard-header">
    <div class="dashboard-title">
      <h1>Manage Content for {{book.name}}</h1>
      <p>Add, edit, or delete sections in this book</p>
    </div>
    <div class="dashboard-actions">
      <a href="/dashboard" class="action-button back-button">
        <i class="fas fa-arrow-left"></i> Back to Dashboard
      </a>
      <button class="action-button add-button" onclick="showAddSectionModal()">
        <i class="fas fa-plus"></i>
        <span>Add Section</span>
      </button>
    </div>
  </div>

  <!-- Bulk Actions (hidden by default) -->
  <div class="bulk-actions" id="bulkActions">
    <span id="selectedCount">0 items selected</span>
    <button class="btn btn-delete" onclick="bulkDeleteSections()">
      <i class="fas fa-trash"></i> Delete Selected
    </button>
  </div>

  <div class="sections-list" id="sectionsList">
    {{#each sections}}
    <div class="section-item" data-section-id="{{id}}" data-section-number="{{section_number}}" data-name="{{name}}">
      <div class="section-info">
        <input type="checkbox" class="section-checkbox" onchange="toggleBulkSelection()">
        <div class="section-details">
          <h3>Section {{section_number}}: {{name}}</h3>
          <p>Pages: {{page_start}} - {{page_end}}
            <span class="section-status {{#if (gt page_start page_end)}}invalid{{else}}valid{{/if}}">
              {{#if (gt page_start page_end)}}Invalid Range{{else}}Valid Range{{/if}}
            </span>
          </p>
        </div>
      </div>
      <div class="section-actions">
        <button class="btn btn-edit" onclick="editSection({{id}}, {{section_number}}, '{{name}}', {{page_start}}, {{page_end}})">
          <i class="fas fa-edit"></i> Edit
        </button>
        <button class="btn btn-delete" onclick="deleteSection({{id}})">
          <i class="fas fa-trash"></i> Delete
        </button>
        <a href="/book/{{../book.id}}/section/{{id}}/download" class="btn btn-download" target="_blank">
          <i class="fas fa-download"></i> Download
        </a>
      </div>
    </div>
    {{/each}}
  </div>

  <!-- Empty state -->
  {{#if (eq sections.length 0)}}
  <div class="empty-state">
    <i class="fas fa-book"></i>
    <h3>No Content Found</h3>
    <p>Get started by adding content to this book.</p>
    <button class="action-button add-button" onclick="showAddSectionModal()">
      <i class="fas fa-plus"></i> Add Content
    </button>
  </div>
  {{/if}}
</div>

<!-- Add/Edit Section Modal -->
<div id="sectionModal" class="modal" style="display: none;">
  <div class="modal-content">
    <span class="close" onclick="closeModal()">&times;</span>
    <h2 id="modalTitle">Add Content</h2>
    <form id="sectionForm">
      <input type="hidden" id="sectionId" value="">
      <div class="form-group">
        <label for="sectionNumber">Section Number: <span class="required">*</span></label>
        <input type="number" id="sectionNumber" required min="1">
        <span class="error-message" id="sectionNumberError"></span>
      </div>
      <div class="form-group">
        <label for="sectionName">Section Name: <span class="required">*</span></label>
        <input type="text" id="sectionName" required maxlength="200">
        <span class="error-message" id="sectionNameError"></span>
      </div>
      <div class="form-group">
        <label for="pageStart">Start Page: <span class="required">*</span></label>
        <input type="number" id="pageStart" required min="1">
        <span class="error-message" id="pageStartError"></span>
      </div>
      <div class="form-group">
        <label for="pageEnd">End Page: <span class="required">*</span></label>
        <input type="number" id="pageEnd" required min="1">
        <span class="error-message" id="pageEndError"></span>
      </div>
      <div class="form-actions">
        <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
        <button type="submit" class="btn btn-primary" id="submitBtn">
          <span id="submitText">Save Section</span>
          <span id="submitSpinner" style="display: none;">
            <i class="fas fa-spinner fa-spin"></i> Saving...
          </span>
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Loading Overlay -->
<div id="loadingOverlay" class="loading-overlay">
  <div class="loading-content">
    <div class="spinner"></div>
    <p id="loadingText">Processing...</p>
  </div>
</div>

<script>
// Global state
let sections = {{{json sections}}} || [];
let selectedSections = new Set();
let bookId = {{{book.id}}};

// DOM elements - declared globally but assigned in DOMContentLoaded
let sectionsList;
let bulkActions;
let selectedCount;
let loadingOverlay;
let loadingText;

// Initialize the page
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOM loaded, sections data:', sections);
  console.log('sectionsList element:', document.getElementById('sectionsList'));

  try {
    // Assign DOM elements after DOM is loaded
    sectionsList = document.getElementById('sectionsList');
    bulkActions = document.getElementById('bulkActions');
    selectedCount = document.getElementById('selectedCount');
    loadingOverlay = document.getElementById('loadingOverlay');
    loadingText = document.getElementById('loadingText');

    console.log('sectionsList assigned:', sectionsList);

    setupEventListeners();
    renderSections();
    console.log('Initialization complete');
  } catch (error) {
    console.error('Error during initialization:', error);
  }
});

// Setup event listeners
function setupEventListeners() {
  console.log('Setting up event listeners');

  try {
    // Form validation - attach directly to the form
    const sectionForm = document.getElementById('sectionForm');
    if (sectionForm) {
      sectionForm.addEventListener('submit', function(e) {
        console.log('Form submit intercepted directly');
        handleFormSubmit(e);
      });
      console.log('Form submit event listener attached directly to form');
    } else {
      console.error('sectionForm not found');
    }

    // Page range validation
    document.getElementById('pageStart').addEventListener('input', validatePageRange);
    document.getElementById('pageEnd').addEventListener('input', validatePageRange);

    // Download link handling
    document.addEventListener('click', function(e) {
      if (e.target.closest('.btn-download')) {
        e.preventDefault();
        const link = e.target.closest('.btn-download');
        const sectionId = link.getAttribute('data-section-id');
        if (sectionId) {
          window.open(`/book/${bookId}/section/${sectionId}/download`, '_blank');
        }
      }
    });

    // Close modal on outside click
    window.addEventListener('click', function(event) {
      const modal = document.getElementById('sectionModal');
      if (event.target === modal) {
        closeModal();
      }
    });

    console.log('All event listeners attached successfully');
  } catch (error) {
    console.error('Error setting up event listeners:', error);
  }
}

// Utility functions
function showAlert(message, type = 'info') {
  const alertContainer = document.getElementById('alertContainer');
  const alert = document.createElement('div');
  alert.className = `alert alert-${type}`;
  alert.textContent = message;
  alertContainer.appendChild(alert);

  // Auto-remove after 5 seconds
  setTimeout(() => {
    alert.remove();
  }, 5000);
}

function showLoading(text = 'Processing...') {
  loadingText.textContent = text;
  loadingOverlay.style.display = 'flex';
}

function hideLoading() {
  loadingOverlay.style.display = 'none';
}

function validateForm() {
  let isValid = true;
  const errors = {};

  // Clear previous errors
  document.querySelectorAll('.form-group').forEach(group => group.classList.remove('error'));
  document.querySelectorAll('.error-message').forEach(msg => msg.style.display = 'none');

  // Section number validation
  const sectionNumber = parseInt(document.getElementById('sectionNumber').value);
  if (!sectionNumber || sectionNumber < 1) {
    errors.sectionNumber = 'Section number must be a positive integer';
    isValid = false;
  } else {
    // Check for duplicate section numbers (excluding current section being edited)
    const currentSectionId = document.getElementById('sectionId').value;
    const duplicate = sections.find(section =>
      section.section_number === sectionNumber && section.id.toString() !== currentSectionId
    );
    if (duplicate) {
      errors.sectionNumber = `Section number ${sectionNumber} already exists`;
      isValid = false;
    }
  }

  // Section name validation
  const sectionName = document.getElementById('sectionName').value.trim();
  if (!sectionName) {
    errors.sectionName = 'Section name is required';
    isValid = false;
  } else if (sectionName.length > 200) {
    errors.sectionName = 'Section name must be less than 200 characters';
    isValid = false;
  }

  // Page validation
  const pageStart = parseInt(document.getElementById('pageStart').value);
  const pageEnd = parseInt(document.getElementById('pageEnd').value);

  if (!pageStart || pageStart < 1) {
    errors.pageStart = 'Start page must be a positive integer';
    isValid = false;
  }

  if (!pageEnd || pageEnd < 1) {
    errors.pageEnd = 'End page must be a positive integer';
    isValid = false;
  }

  if (pageStart && pageEnd && pageStart > pageEnd) {
    errors.pageEnd = 'End page must be greater than or equal to start page';
    isValid = false;
  }

  // Display errors
  Object.keys(errors).forEach(field => {
    const errorElement = document.getElementById(`${field}Error`);
    const formGroup = errorElement.closest('.form-group');
    errorElement.textContent = errors[field];
    errorElement.style.display = 'block';
    formGroup.classList.add('error');
  });

  return isValid;
}

function validatePageRange() {
  const pageStart = parseInt(document.getElementById('pageStart').value);
  const pageEnd = parseInt(document.getElementById('pageEnd').value);

  if (pageStart && pageEnd && pageStart > pageEnd) {
    document.getElementById('pageEndError').textContent = 'End page must be greater than or equal to start page';
    document.getElementById('pageEndError').style.display = 'block';
    document.getElementById('pageEnd').closest('.form-group').classList.add('error');
  } else {
    document.getElementById('pageEndError').style.display = 'none';
    document.getElementById('pageEnd').closest('.form-group').classList.remove('error');
  }
}

// Modal functions
function showAddSectionModal() {
  document.getElementById('modalTitle').textContent = 'Add Section';
  document.getElementById('sectionId').value = '';
  document.getElementById('sectionNumber').value = '';
  document.getElementById('sectionName').value = '';
  document.getElementById('pageStart').value = '';
  document.getElementById('pageEnd').value = '';
  document.getElementById('sectionModal').style.display = 'block';

  // Clear any previous errors
  document.querySelectorAll('.form-group').forEach(group => group.classList.remove('error'));
  document.querySelectorAll('.error-message').forEach(msg => msg.style.display = 'none');

  // Ensure form event listener is attached
  const sectionForm = document.getElementById('sectionForm');
  if (sectionForm && !sectionForm.hasAttribute('data-listener-attached')) {
    sectionForm.addEventListener('submit', function(e) {
      console.log('Form submit intercepted from modal');
      handleFormSubmit(e);
    });
    sectionForm.setAttribute('data-listener-attached', 'true');
  }
}

function editSection(id, number, name, start, end) {
  document.getElementById('modalTitle').textContent = 'Edit Section';
  document.getElementById('sectionId').value = id;
  document.getElementById('sectionNumber').value = number;
  document.getElementById('sectionName').value = name;
  document.getElementById('pageStart').value = start;
  document.getElementById('pageEnd').value = end;
  document.getElementById('sectionModal').style.display = 'block';

  // Clear any previous errors
  document.querySelectorAll('.form-group').forEach(group => group.classList.remove('error'));
  document.querySelectorAll('.error-message').forEach(msg => msg.style.display = 'none');

  // Ensure form event listener is attached
  const sectionForm = document.getElementById('sectionForm');
  if (sectionForm && !sectionForm.hasAttribute('data-listener-attached')) {
    sectionForm.addEventListener('submit', function(e) {
      console.log('Form submit intercepted from modal');
      handleFormSubmit(e);
    });
    sectionForm.setAttribute('data-listener-attached', 'true');
  }
}

function closeModal() {
  document.getElementById('sectionModal').style.display = 'none';
}

// API functions
async function handleFormSubmit(e) {
  console.log('handleFormSubmit called at', new Date().toISOString());
  console.log('Event:', e);
  console.log('Form data:', {
    sectionId: document.getElementById('sectionId').value,
    sectionNumber: document.getElementById('sectionNumber').value,
    sectionName: document.getElementById('sectionName').value,
    pageStart: document.getElementById('pageStart').value,
    pageEnd: document.getElementById('pageEnd').value
  });
  e.preventDefault();
  console.log('preventDefault called');

  if (!validateForm()) {
    console.log('Form validation failed');
    return;
  }

  console.log('Form validation passed');

  const submitBtn = document.getElementById('submitBtn');
  const submitText = document.getElementById('submitText');
  const submitSpinner = document.getElementById('submitSpinner');

  // Show loading state
  submitBtn.disabled = true;
  submitText.style.display = 'none';
  submitSpinner.style.display = 'inline';

  const sectionId = document.getElementById('sectionId').value;
  const isEdit = sectionId !== '';
  const url = isEdit ? `/api/admin/section/edit/${sectionId}` : `/api/admin/book/${bookId}/section/add`;
  const method = 'POST';

  const formData = {
    section_number: parseInt(document.getElementById('sectionNumber').value),
    name: document.getElementById('sectionName').value.trim(),
    page_start: parseInt(document.getElementById('pageStart').value),
    page_end: parseInt(document.getElementById('pageEnd').value),
  };

  try {
    showLoading(isEdit ? 'Updating section...' : 'Adding section...');
    console.log('Making fetch request to:', url);
    console.log('Request data:', formData);
    const response = await fetch(url, {
      method,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(formData),
    });
    console.log('Response status:', response.status);
    console.log('Response ok:', response.ok);

    const result = await response.json();
    console.log('Response data:', result);

    if (response.ok) {
      showAlert(result.message, 'success');
      closeModal();

      // Refresh the page to show updated data
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    } else {
      showAlert(result.error || 'Failed to save section', 'error');
    }
  } catch (error) {
    console.error('Error saving section:', error);
    showAlert('Network error. Please try again.', 'error');
  } finally {
    hideLoading();
    submitBtn.disabled = false;
    submitText.style.display = 'inline';
    submitSpinner.style.display = 'none';
  }
}

async function deleteSection(sectionId) {
  if (!confirm('Are you sure you want to delete this section? This action cannot be undone.')) {
    return;
  }

  try {
    showLoading('Deleting section...');
    const response = await fetch(`/api/admin/section/delete/${sectionId}`, { method: 'POST' });
    const result = await response.json();

    if (response.ok) {
      showAlert(result.message, 'success');
      // Remove from local arrays
      sections = sections.filter(section => section.id !== sectionId);
      selectedSections.delete(sectionId);

      renderSections();
    } else {
      showAlert(result.error || 'Failed to delete section', 'error');
    }
  } catch (error) {
    console.error('Error deleting section:', error);
    showAlert('Network error. Please try again.', 'error');
  } finally {
    hideLoading();
  }
}

async function bulkDeleteSections() {
  if (selectedSections.size === 0) {
    showAlert('No sections selected', 'error');
    return;
  }

  if (!confirm(`Are you sure you want to delete ${selectedSections.size} section(s)? This action cannot be undone.`)) {
    return;
  }

  try {
    showLoading('Deleting selected sections...');
    const response = await fetch(`/api/admin/book/${bookId}/sections/bulk-delete`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ sectionIds: Array.from(selectedSections) }),
    });

    const result = await response.json();

    if (response.ok) {
      showAlert(result.message, 'success');
      // Remove from local arrays
      sections = sections.filter(section => !selectedSections.has(section.id));
      selectedSections.clear();
      renderSections();
    } else {
      showAlert(result.error || 'Failed to delete sections', 'error');
    }
  } catch (error) {
    console.error('Error in bulk delete:', error);
    showAlert('Network error during bulk delete', 'error');
  } finally {
    hideLoading();
  }
}

// UI functions
function toggleBulkSelection() {
  const checkboxes = document.querySelectorAll('.section-checkbox:checked');
  selectedSections.clear();
  checkboxes.forEach(checkbox => {
    selectedSections.add(parseInt(checkbox.closest('.section-item').dataset.sectionId));
  });

  updateBulkActions();
}

function updateBulkActions() {
  if (selectedSections.size > 0) {
    bulkActions.classList.add('show');
    selectedCount.textContent = `${selectedSections.size} item${selectedSections.size > 1 ? 's' : ''} selected`;
  } else {
    bulkActions.classList.remove('show');
  }
}

function renderSections() {
  if (!sectionsList) {
    console.error('sectionsList element not found');
    return;
  }

  // Sort sections by section_number for consistent display
  const sortedSections = [...sections].sort((a, b) => a.section_number - b.section_number);

  sectionsList.innerHTML = sortedSections.map(section => {
    const isValidRange = section.page_start <= section.page_end;
    const statusClass = isValidRange ? 'valid' : 'invalid';
    const statusText = isValidRange ? 'Valid Range' : 'Invalid Range';
    const checked = selectedSections.has(section.id) ? 'checked' : '';
    const escapedName = section.name.replace(/'/g, "\\'");

    return `
    <div class="section-item" data-section-id="${section.id}" data-section-number="${section.section_number}" data-name="${section.name}">
      <div class="section-info">
        <input type="checkbox" class="section-checkbox" onchange="toggleBulkSelection()" ${checked}>
        <div class="section-details">
          <h3>Section ${section.section_number}: ${section.name}</h3>
          <p>Pages: ${section.page_start} - ${section.page_end}
            <span class="section-status ${statusClass}">
              ${statusText}
            </span>
          </p>
        </div>
      </div>
      <div class="section-actions">
        <button class="btn btn-edit" onclick="editSection(${section.id}, ${section.section_number}, '${escapedName}', ${section.page_start}, ${section.page_end})">
          <i class="fas fa-edit"></i> Edit
        </button>
        <button class="btn btn-delete" onclick="deleteSection(${section.id})">
          <i class="fas fa-trash"></i> Delete
        </button>
        <a href="/book/${bookId}/section/${section.id}/download" class="btn btn-download" target="_blank">
          <i class="fas fa-download"></i> Download
        </a>
      </div>
    </div>
  `;
  }).join('');
}
</script>