{{! Using main layout }}
{{#section 'head'}}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<style>
/* Loading overlay */
.loading-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(13, 17, 23, 0.8);
  display: none;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.loading-content {
  background: var(--bg-darker);
  color: var(--text-primary);
  padding: 20px;
  border-radius: 8px;
  text-align: center;
  border: 1px solid var(--border-color);
}

.spinner {
  border: 4px solid var(--border-color);
  border-top: 4px solid var(--primary-color);
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
  margin: 0 auto 10px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Alert styles */
.alert {
  padding: 12px 16px;
  margin: 10px 0;
  border-radius: 4px;
  display: none;
}

.alert-success {
  background-color: rgba(46, 160, 67, 0.1);
  color: var(--success-color);
  border: 1px solid var(--success-color);
}

.alert-error {
  background-color: rgba(248, 81, 73, 0.1);
  color: var(--error-color);
  border: 1px solid var(--error-color);
}

.alert-info {
  background-color: rgba(31, 111, 235, 0.1);
  color: var(--secondary-color);
  border: 1px solid var(--secondary-color);
}

/* Enhanced form validation */
.form-group.error input {
  border-color: var(--error-color);
  box-shadow: 0 0 0 0.2rem rgba(248, 81, 73, 0.25);
}

.form-group.error .error-message {
  color: var(--error-color);
  font-size: 0.875rem;
  margin-top: 5px;
  display: block;
}

.error-message {
  display: none;
}

/* Enhanced lab items */
.lab-item {
  transition: all 0.3s ease;
  background: var(--bg-darker);
  border: 1px solid var(--border-color);
  border-radius: 8px;
  padding: 15px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.lab-item:hover {
  background: var(--bg-light);
  border-color: var(--primary-color);
  transform: translateY(-1px);
}

.lab-status {
  display: inline-block;
  padding: 2px 8px;
  border-radius: 12px;
  font-size: 0.75rem;
  font-weight: bold;
  margin-left: 10px;
}

.lab-status.valid {
  background-color: rgba(46, 160, 67, 0.1);
  color: var(--success-color);
  border: 1px solid var(--success-color);
}

.lab-status.invalid {
  background-color: rgba(248, 81, 73, 0.1);
  color: var(--error-color);
  border: 1px solid var(--error-color);
}

.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

/* Empty state */
.empty-state {
  text-align: center;
  padding: 40px;
  color: var(--text-secondary);
}

.empty-state i {
  font-size: 48px;
  margin-bottom: 16px;
  display: block;
}

/* Bulk actions */
.bulk-actions {
  background: var(--bg-darker);
  border: 1px solid var(--border-color);
  padding: 15px;
  border-radius: 8px;
  margin-bottom: 20px;
  display: none;
}

.bulk-actions.show {
  display: block;
}

.lab-info {
  display: flex;
  align-items: flex-start;
  gap: 10px;
  flex: 1;
}

.lab-checkbox {
  margin-top: 5px;
}

.form-actions {
  display: flex;
  gap: 10px;
  justify-content: flex-end;
  margin-top: 20px;
}

.btn-primary {
  background: var(--primary-color);
  color: var(--text-primary);
  border: 1px solid var(--primary-color);
}

.btn-primary:hover {
  background: var(--primary-accent);
}

.btn-secondary {
  background: var(--bg-light);
  color: var(--text-primary);
  border: 1px solid var(--border-color);
}

.btn-secondary:hover {
  background: var(--bg-lighter);
}

.required {
  color: var(--error-color);
}

.labs-list {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.lab-details h3 {
  margin: 0 0 5px 0;
  color: var(--text-primary);
}

.lab-details p {
  margin: 0;
  color: var(--text-secondary);
}

.lab-actions {
  display: flex;
  gap: 10px;
}

.btn {
  padding: 8px 12px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  text-decoration: none;
  display: inline-flex;
  align-items: center;
  gap: 5px;
  transition: all 0.3s ease;
}

.btn-edit {
  background: var(--secondary-color);
  color: var(--text-primary);
  border: 1px solid var(--secondary-color);
}

.btn-edit:hover {
  background: rgba(31, 111, 235, 0.8);
}

.btn-delete {
  background: var(--error-color);
  color: var(--text-primary);
  border: 1px solid var(--error-color);
}

.btn-delete:hover {
  background: rgba(248, 81, 73, 0.8);
}

.btn-download {
  background: var(--success-color);
  color: var(--text-primary);
  border: 1px solid var(--success-color);
}

.btn-download:hover {
  background: rgba(46, 160, 67, 0.8);
}

.modal {
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(13, 17, 23, 0.8);
}

.modal-content {
  background: var(--bg-darker);
  color: var(--text-primary);
  margin: 15% auto;
  padding: 20px;
  border: 1px solid var(--border-color);
  width: 80%;
  max-width: 500px;
  border-radius: 8px;
}

.close {
  color: var(--text-secondary);
  float: right;
  font-size: 28px;
  font-weight: bold;
  cursor: pointer;
}

.close:hover {
  color: var(--text-primary);
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  color: var(--text-primary);
}

.form-group input {
  width: 100%;
  padding: 8px;
  border: 1px solid var(--border-color);
  border-radius: 4px;
  background: var(--bg-dark);
  color: var(--text-primary);
}

.form-group input:focus {
  border-color: var(--primary-color);
  outline: none;
}
</style>
{{/section}}

<div class="dashboard-container">
  <!-- Alert container -->
  <div id="alertContainer"></div>

  <div class="dashboard-header">
    <div class="dashboard-title">
      <h1>Manage Content for {{book.name}}</h1>
      <p>Add, edit, or delete labs and other content for this lab manual</p>
    </div>
    <div class="dashboard-actions">
      <a href="/dashboard" class="action-button back-button">
        <i class="fas fa-arrow-left"></i> Back to Dashboard
      </a>
      <button class="action-button add-button" onclick="showAddLabModal()">
        <i class="fas fa-plus"></i>
        <span>Add Lab</span>
      </button>
    </div>
  </div>

  <!-- Bulk Actions (hidden by default) -->
  <div class="bulk-actions" id="bulkActions">
    <span id="selectedCount">0 items selected</span>
    <button class="btn btn-delete" onclick="bulkDeleteLabs()">
      <i class="fas fa-trash"></i> Delete Selected
    </button>
  </div>

  <div class="labs-list" id="labsList">
    {{#each labs}}
    <div class="lab-item" data-lab-id="{{id}}" data-lab-number="{{lab_number}}" data-name="{{name}}">
      <div class="lab-info">
        <input type="checkbox" class="lab-checkbox" onchange="toggleBulkSelection()">
        <div class="lab-details">
          <h3>Lab {{lab_number}}: {{name}}</h3>
          <p>Pages: {{page_start}} - {{page_end}}
            <span class="lab-status {{#if (gt page_start page_end)}}invalid{{else}}valid{{/if}}">
              {{#if (gt page_start page_end)}}Invalid Range{{else}}Valid Range{{/if}}
            </span>
          </p>
        </div>
      </div>
      <div class="lab-actions">
        <button class="btn btn-edit" onclick="editLab({{id}}, {{lab_number}}, '{{name}}', {{page_start}}, {{page_end}})">
          <i class="fas fa-edit"></i> Edit
        </button>
        <button class="btn btn-delete" onclick="deleteLab({{id}})">
          <i class="fas fa-trash"></i> Delete
        </button>
        <a href="/book/{{../book.id}}/lab/{{id}}/download" class="btn btn-download" target="_blank">
          <i class="fas fa-download"></i> Download
        </a>
      </div>
    </div>
    {{/each}}
  </div>

  <!-- Empty state -->
  {{#if (eq labs.length 0)}}
  <div class="empty-state">
    <i class="fas fa-flask"></i>
    <h3>No Content Found</h3>
    <p>Get started by adding content to this manual.</p>
    <button class="action-button add-button" onclick="showAddLabModal()">
      <i class="fas fa-plus"></i> Add Content
    </button>
  </div>
  {{/if}}
</div>

<!-- Add/Edit Lab Modal -->
<div id="labModal" class="modal" style="display: none;">
  <div class="modal-content">
    <span class="close" onclick="closeModal()">&times;</span>
    <h2 id="modalTitle">Add Content</h2>
    <form id="labForm">
      <input type="hidden" id="labId" value="">
      <div class="form-group">
        <label for="labNumber">Entry Number: <span class="required">*</span></label>
        <input type="number" id="labNumber" required min="1">
        <span class="error-message" id="labNumberError"></span>
      </div>
      <div class="form-group">
        <label for="labName">Content Name: <span class="required">*</span></label>
        <input type="text" id="labName" required maxlength="200">
        <span class="error-message" id="labNameError"></span>
      </div>
      <div class="form-group">
        <label for="pageStart">Start Page: <span class="required">*</span></label>
        <input type="number" id="pageStart" required min="1">
        <span class="error-message" id="pageStartError"></span>
      </div>
      <div class="form-group">
        <label for="pageEnd">End Page: <span class="required">*</span></label>
        <input type="number" id="pageEnd" required min="1">
        <span class="error-message" id="pageEndError"></span>
      </div>
      <div class="form-actions">
        <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
        <button type="submit" class="btn btn-primary" id="submitBtn">
          <span id="submitText">Save Content</span>
          <span id="submitSpinner" style="display: none;">
            <i class="fas fa-spinner fa-spin"></i> Saving...
          </span>
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Loading Overlay -->
<div id="loadingOverlay" class="loading-overlay">
  <div class="loading-content">
    <div class="spinner"></div>
    <p id="loadingText">Processing...</p>
  </div>
</div>

<script>

// Global state
let labs = {{{json labs}}} || [];
let selectedLabs = new Set();
let bookId = {{{book.id}}};

// DOM elements - declared globally but assigned in DOMContentLoaded
let labsList;
let bulkActions;
let selectedCount;
let loadingOverlay;
let loadingText;

// Initialize the page
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOM loaded, labs data:', labs);
  console.log('labsList element:', document.getElementById('labsList'));

  try {
    // Assign DOM elements after DOM is loaded
    labsList = document.getElementById('labsList');
    bulkActions = document.getElementById('bulkActions');
    selectedCount = document.getElementById('selectedCount');
    loadingOverlay = document.getElementById('loadingOverlay');
    loadingText = document.getElementById('loadingText');

    console.log('labsList assigned:', labsList);

    setupEventListeners();
    renderLabs();
    console.log('Initialization complete');
  } catch (error) {
    console.error('Error during initialization:', error);
  }
});

// Setup event listeners
function setupEventListeners() {
  console.log('Setting up event listeners');

  try {
    // Form validation - attach directly to the form
    const labForm = document.getElementById('labForm');
    if (labForm) {
      labForm.addEventListener('submit', function(e) {
        console.log('Form submit intercepted directly');
        handleFormSubmit(e);
      });
      console.log('Form submit event listener attached directly to form');
    } else {
      console.error('labForm not found');
    }

    // Page range validation
    document.getElementById('pageStart').addEventListener('input', validatePageRange);
    document.getElementById('pageEnd').addEventListener('input', validatePageRange);

  // Download link handling
  document.addEventListener('click', function(e) {
    if (e.target.closest('.btn-download')) {
      e.preventDefault();
      const link = e.target.closest('.btn-download');
      const labId = link.getAttribute('data-lab-id');
      if (labId) {
        window.open(`/book/${bookId}/lab/${labId}/download`, '_blank');
      }
    }
  });

  // Close modal on outside click
  window.addEventListener('click', function(event) {
    const modal = document.getElementById('labModal');
    if (event.target === modal) {
      closeModal();
    }
  });

    console.log('All event listeners attached successfully');
  } catch (error) {
    console.error('Error setting up event listeners:', error);
  }
}

// Utility functions

function showAlert(message, type = 'info') {
  const alertContainer = document.getElementById('alertContainer');
  const alert = document.createElement('div');
  alert.className = `alert alert-${type}`;
  alert.textContent = message;
  alertContainer.appendChild(alert);

  // Auto-remove after 5 seconds
  setTimeout(() => {
    alert.remove();
  }, 5000);
}

function showLoading(text = 'Processing...') {
  loadingText.textContent = text;
  loadingOverlay.style.display = 'flex';
}

function hideLoading() {
  loadingOverlay.style.display = 'none';
}

function validateForm() {
  let isValid = true;
  const errors = {};

  // Clear previous errors
  document.querySelectorAll('.form-group').forEach(group => group.classList.remove('error'));
  document.querySelectorAll('.error-message').forEach(msg => msg.style.display = 'none');

  // Lab number validation
  const labNumber = parseInt(document.getElementById('labNumber').value);
  if (!labNumber || labNumber < 1) {
    errors.labNumber = 'Entry number must be a positive integer';
    isValid = false;
  } else {
    // Check for duplicate lab numbers (excluding current lab being edited)
    const currentLabId = document.getElementById('labId').value;
    const duplicate = labs.find(lab =>
      lab.lab_number === labNumber && lab.id.toString() !== currentLabId
    );
    if (duplicate) {
      errors.labNumber = `Entry number ${labNumber} already exists`;
      isValid = false;
    }
  }

  // Lab name validation
  const labName = document.getElementById('labName').value.trim();
  if (!labName) {
    errors.labName = 'Content name is required';
    isValid = false;
  } else if (labName.length > 200) {
    errors.labName = 'Content name must be less than 200 characters';
    isValid = false;
  }

  // Page validation
  const pageStart = parseInt(document.getElementById('pageStart').value);
  const pageEnd = parseInt(document.getElementById('pageEnd').value);

  if (!pageStart || pageStart < 1) {
    errors.pageStart = 'Start page must be a positive integer';
    isValid = false;
  }

  if (!pageEnd || pageEnd < 1) {
    errors.pageEnd = 'End page must be a positive integer';
    isValid = false;
  }

  if (pageStart && pageEnd && pageStart > pageEnd) {
    errors.pageEnd = 'End page must be greater than or equal to start page';
    isValid = false;
  }

  // Display errors
  Object.keys(errors).forEach(field => {
    const errorElement = document.getElementById(`${field}Error`);
    const formGroup = errorElement.closest('.form-group');
    errorElement.textContent = errors[field];
    errorElement.style.display = 'block';
    formGroup.classList.add('error');
  });

  return isValid;
}

function validatePageRange() {
  const pageStart = parseInt(document.getElementById('pageStart').value);
  const pageEnd = parseInt(document.getElementById('pageEnd').value);

  if (pageStart && pageEnd && pageStart > pageEnd) {
    document.getElementById('pageEndError').textContent = 'End page must be greater than or equal to start page';
    document.getElementById('pageEndError').style.display = 'block';
    document.getElementById('pageEnd').closest('.form-group').classList.add('error');
  } else {
    document.getElementById('pageEndError').style.display = 'none';
    document.getElementById('pageEnd').closest('.form-group').classList.remove('error');
  }
}

// Modal functions
function showAddLabModal() {
  document.getElementById('modalTitle').textContent = 'Add Lab';
  document.getElementById('labId').value = '';
  document.getElementById('labNumber').value = '';
  document.getElementById('labName').value = '';
  document.getElementById('pageStart').value = '';
  document.getElementById('pageEnd').value = '';
  document.getElementById('labModal').style.display = 'block';

  // Clear any previous errors
  document.querySelectorAll('.form-group').forEach(group => group.classList.remove('error'));
  document.querySelectorAll('.error-message').forEach(msg => msg.style.display = 'none');

  // Ensure form event listener is attached
  const labForm = document.getElementById('labForm');
  if (labForm && !labForm.hasAttribute('data-listener-attached')) {
    labForm.addEventListener('submit', function(e) {
      console.log('Form submit intercepted from modal');
      handleFormSubmit(e);
    });
    labForm.setAttribute('data-listener-attached', 'true');
  }
}

function editLab(id, number, name, start, end) {
  document.getElementById('modalTitle').textContent = 'Edit Content';
  document.getElementById('labId').value = id;
  document.getElementById('labNumber').value = number;
  document.getElementById('labName').value = name;
  document.getElementById('pageStart').value = start;
  document.getElementById('pageEnd').value = end;
  document.getElementById('labModal').style.display = 'block';

  // Clear any previous errors
  document.querySelectorAll('.form-group').forEach(group => group.classList.remove('error'));
  document.querySelectorAll('.error-message').forEach(msg => msg.style.display = 'none');

  // Ensure form event listener is attached
  const labForm = document.getElementById('labForm');
  if (labForm && !labForm.hasAttribute('data-listener-attached')) {
    labForm.addEventListener('submit', function(e) {
      console.log('Form submit intercepted from modal');
      handleFormSubmit(e);
    });
    labForm.setAttribute('data-listener-attached', 'true');
  }
}

function closeModal() {
  document.getElementById('labModal').style.display = 'none';
}

// API functions
async function handleFormSubmit(e) {
  console.log('handleFormSubmit called at', new Date().toISOString());
  console.log('Event:', e);
  console.log('Form data:', {
    labId: document.getElementById('labId').value,
    labNumber: document.getElementById('labNumber').value,
    labName: document.getElementById('labName').value,
    pageStart: document.getElementById('pageStart').value,
    pageEnd: document.getElementById('pageEnd').value
  });
  e.preventDefault();
  console.log('preventDefault called');

  if (!validateForm()) {
    console.log('Form validation failed');
    return;
  }

  console.log('Form validation passed');

  const submitBtn = document.getElementById('submitBtn');
  const submitText = document.getElementById('submitText');
  const submitSpinner = document.getElementById('submitSpinner');

  // Show loading state
  submitBtn.disabled = true;
  submitText.style.display = 'none';
  submitSpinner.style.display = 'inline';

  const labId = document.getElementById('labId').value;
  const isEdit = labId !== '';
  const url = isEdit ? `/api/admin/Lab/Edit/${labId}` : `/api/admin/Book/${bookId}/Lab/Add`;
  const method = 'POST';

  const formData = {
    lab_number: parseInt(document.getElementById('labNumber').value),
    name: document.getElementById('labName').value.trim(),
    page_start: parseInt(document.getElementById('pageStart').value),
    page_end: parseInt(document.getElementById('pageEnd').value),
  };

  try {
    showLoading(isEdit ? 'Updating lab...' : 'Adding lab...');
    console.log('Making fetch request to:', url);
    console.log('Request data:', formData);
    const response = await fetch(url, {
      method,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(formData),
    });
    console.log('Response status:', response.status);
    console.log('Response ok:', response.ok);

    const result = await response.json();
    console.log('Response data:', result);

    if (response.ok) {
      showAlert(result.message, 'success');
      closeModal();

      // Refresh the page to show updated data
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    } else {
      showAlert(result.error || 'Failed to save lab', 'error');
    }
  } catch (error) {
    console.error('Error saving lab:', error);
    showAlert('Network error. Please try again.', 'error');
  } finally {
    hideLoading();
    submitBtn.disabled = false;
    submitText.style.display = 'inline';
    submitSpinner.style.display = 'none';
  }
}

async function deleteLab(labId) {
  if (!confirm('Are you sure you want to delete this lab? This action cannot be undone.')) {
    return;
  }

  try {
    showLoading('Deleting lab...');
    const response = await fetch(`/api/admin/Lab/Delete/${labId}`, { method: 'POST' });
    const result = await response.json();

    if (response.ok) {
      showAlert(result.message, 'success');
      // Remove from local arrays
      labs = labs.filter(lab => lab.id !== labId);
      selectedLabs.delete(labId);

      renderLabs();
    } else {
      showAlert(result.error || 'Failed to delete lab', 'error');
    }
  } catch (error) {
    console.error('Error deleting lab:', error);
    showAlert('Network error. Please try again.', 'error');
  } finally {
    hideLoading();
  }
}

async function bulkDeleteLabs() {
  if (selectedLabs.size === 0) {
    showAlert('No labs selected', 'error');
    return;
  }

  if (!confirm(`Are you sure you want to delete ${selectedLabs.size} lab(s)? This action cannot be undone.`)) {
    return;
  }

  try {
    showLoading('Deleting selected labs...');
    const response = await fetch(`/api/admin/Book/${bookId}/Labs/BulkDelete`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ labIds: Array.from(selectedLabs) }),
    });

    const result = await response.json();

    if (response.ok) {
      showAlert(result.message, 'success');
      // Remove from local arrays
      labs = labs.filter(lab => !selectedLabs.has(lab.id));
      selectedLabs.clear();
      renderLabs();
    } else {
      showAlert(result.error || 'Failed to delete labs', 'error');
    }
  } catch (error) {
    console.error('Error in bulk delete:', error);
    showAlert('Network error during bulk delete', 'error');
  } finally {
    hideLoading();
  }
}

// UI functions
function toggleBulkSelection() {
  const checkboxes = document.querySelectorAll('.lab-checkbox:checked');
  selectedLabs.clear();
  checkboxes.forEach(checkbox => {
    selectedLabs.add(parseInt(checkbox.closest('.lab-item').dataset.labId));
  });

  updateBulkActions();
}

function updateBulkActions() {
  if (selectedLabs.size > 0) {
    bulkActions.classList.add('show');
    selectedCount.textContent = `${selectedLabs.size} item${selectedLabs.size > 1 ? 's' : ''} selected`;
  } else {
    bulkActions.classList.remove('show');
  }
}

function renderLabs() {
  if (!labsList) {
    console.error('labsList element not found');
    return;
  }

  // Sort labs by page_start to ensure proper sequential numbering
  const sortedLabs = [...labs].sort((a, b) => a.page_start - b.page_start);

  labsList.innerHTML = sortedLabs.map((lab, index) => {
    const isValidRange = lab.page_start <= lab.page_end;
    const statusClass = isValidRange ? 'valid' : 'invalid';
    const statusText = isValidRange ? 'Valid Range' : 'Invalid Range';
    const checked = selectedLabs.has(lab.id) ? 'checked' : '';
    const escapedName = lab.name.replace(/'/g, "\\'");

    // Check if this is a title page or special content
    const isTitlePage = lab.name.toLowerCase().includes('title') ||
                       lab.name.toLowerCase().includes('cover') ||
                       lab.page_start === lab.page_end; // Single page might be title

    let displayNumber, displayName;

    if (isTitlePage) {
      displayNumber = '';
      displayName = lab.name; // Display as "Title Page" or whatever the name is
    } else {
      // For actual labs, use sequential numbering based on position (excluding title pages)
      const actualLabIndex = sortedLabs.slice(0, index + 1).filter(l =>
        !l.name.toLowerCase().includes('title') &&
        !l.name.toLowerCase().includes('cover') &&
        l.page_start !== l.page_end
      ).length;

      displayNumber = actualLabIndex;
      displayName = `Lab ${actualLabIndex}: ${lab.name}`;
    }

    return `
    <div class="lab-item" data-lab-id="${lab.id}" data-lab-number="${lab.lab_number}" data-name="${lab.name}">
      <div class="lab-info">
        <input type="checkbox" class="lab-checkbox" onchange="toggleBulkSelection()" ${checked}>
        <div class="lab-details">
          <h3>${displayName}</h3>
          <p>Pages: ${lab.page_start} - ${lab.page_end}
            <span class="lab-status ${statusClass}">
              ${statusText}
            </span>
          </p>
        </div>
      </div>
      <div class="lab-actions">
        <button class="btn btn-edit" onclick="editLab(${lab.id}, ${lab.lab_number}, '${escapedName}', ${lab.page_start}, ${lab.page_end})">
          <i class="fas fa-edit"></i> Edit
        </button>
        <button class="btn btn-delete" onclick="deleteLab(${lab.id})">
          <i class="fas fa-trash"></i> Delete
        </button>
        <a href="/book/${bookId}/lab/${lab.id}/download" class="btn btn-download" target="_blank">
          <i class="fas fa-download"></i> Download
        </a>
      </div>
    </div>
  `;
  }).join('');
}
</script>